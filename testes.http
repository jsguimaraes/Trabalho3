### NestJS Access Control System - HTTP Tests

# Base URL
@baseUrl = http://localhost:3000

# Token variables (replace with actual tokens after login)
@superuserToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQHNpc3RlbWEuY29tIiwic3ViIjoxLCJyb2xlIjoic3VwZXJ1c2VyIiwiaWF0IjoxNzUyMDk5ODU3LCJleHAiOjE3NTIxMDM0NTd9.P6Oaa_A2R2oIcOdZZ099kbdzx4lOPC8z26DZdzl3VhU
@adminToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQGVtYWlsLmNvbSIsInN1YiI6Miwicm9sZSI6ImFkbWluIiwiaWF0IjoxNzUyMDk5ODkzLCJleHAiOjE3NTIxMDM0OTN9.2YhsFpnaTVAn9bp2ro_Kf6r-auzD6O9JcrSVubJITNY
@userToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5ld3VzZXJAZXhhbXBsZS5jb20iLCJzdWIiOjMsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzUyMTAwNDc2LCJleHAiOjE3NTIxMDQwNzZ9._R6XMLsALxWudWKaKHcJcpUNeDUCxJiM87_k4Nyo7b8

### 1. autenticação e login

# Login como Superuser
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "admin@sistema.com",
  "password": "admin123"
}

###

# Login como Administrador
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "admin@email.com",
  "password": "senhaAdmin"
}

###

# Login como Usuário Comum
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "newuser@example.com",
  "password": "newpass123"
}

###

### 2. TESTES DE GESTÃO DE USUÁRIOS (Apenas Superusuário)

# Obter todos os usuários
GET {{baseUrl}}/users
Authorization: Bearer {{superuserToken}}

###

# Criar novo usuário
POST {{baseUrl}}/users
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "name": "New User",
  "email": "newuser@example.com",
  "password": "newpass123",
  "role": "user"
}

###

# Criar novo administrador
POST {{baseUrl}}/users/admin
Authorization: Bearer {{superuserToken}}
Content-Type: application/json

{
  "name": "Novo Administrador",
  "email": "admin@email.com",
  "password": "senhaAdmin"
}

###
POST {{baseUrl}}/users/admin
Authorization: Bearer {{superuserToken}}
Content-Type: application/json

{
  "name": "Novo Administrador",
  "email": "admin3@email.com",
  "password": "senhaAdmin"
}

### 3. TESTES DO MÓDULO DE PERFIL

# Obter perfil do usuário
GET {{baseUrl}}/profile
Authorization: Bearer {{userToken}}

###

# Atualizar perfil do usuário
PUT {{baseUrl}}/profile
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
  "nome": "Updated Name",
  "email": "updated@example.com"
}

###

# Obter permissões do perfil
GET {{baseUrl}}/profile/permissions
Authorization: Bearer {{userToken}}

###

GET {{baseUrl}}/permissions/user/2
Authorization: Bearer {{superuserToken}}

### 4. TESTES DO MÓDULO FINANCEIRO

# Obter dados financeiros
GET {{baseUrl}}/financial
Authorization: Bearer {{adminToken}}

###

# Criar transação
POST {{baseUrl}}/financial/transaction
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "valor": 1500.00,
  "tipo": "receita",
  "descricao": "Venda de produtos"
}

###

# Obter relatório financeiro
GET {{baseUrl}}/financial/report
Authorization: Bearer {{adminToken}}

###

### 5. TESTES DO MÓDULO DE RELATÓRIOS

# Obter todos os relatórios
GET {{baseUrl}}/reports
Authorization: Bearer {{adminToken}}

###

# Gerar novo relatório
POST {{baseUrl}}/reports/generate
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "tipo": "vendas",
  "periodo": "janeiro-2024"
}

###

# Obter relatório de vendas
GET {{baseUrl}}/reports/sales
Authorization: Bearer {{adminToken}}

###

### 6. TESTES DO MÓDULO DE PRODUTOS

# Obter todos os produtos
GET {{baseUrl}}/products
Authorization: Bearer {{adminToken}}

###

# Criar novo produto
POST {{baseUrl}}/products
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "nome": "New Product",
  "preco": 299.99,
  "estoque": 100,
  "categoria": "Electronics"
}

###

# Atualizar produto
PUT {{baseUrl}}/products/1
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "nome": "Updated Product",
  "preco": 399.99,
  "estoque": 75,
  "categoria": "Electronics"
}

###

# Excluir produto
DELETE {{baseUrl}}/products/1
Authorization: Bearer {{adminToken}}

###

# Obter categorias de produtos
GET {{baseUrl}}/products/categories
Authorization: Bearer {{adminToken}}

###

### 7. TESTES DE PERMISSÕES

# Testar acesso sem permissão (deve falhar)
GET {{baseUrl}}/users
Authorization: Bearer {{userToken}}

###

# Testar acesso com permissão (deve ter sucesso)
GET {{baseUrl}}/profile
Authorization: Bearer {{userToken}}

###

### 8. TESTES DE REGISTRO DE ACESSO

# Todas as requisições acima registrarão automaticamente as tentativas de acesso
# Verifique o banco de dados para registros de acesso

### 9. TESTES DE MANIPULAÇÃO DE ERROS

# Testar token inválido
GET {{baseUrl}}/profile
Authorization: Bearer invalid_token

###

# Testar token expirado
GET {{baseUrl}}/profile
Authorization: Bearer expired_token

###

### 10. TESTES DE CRIPTOGRAFIA DE SENHAS

# Criar usuário com senha criptografada
POST {{baseUrl}}/users
Authorization: Bearer {{superuserToken}}
Content-Type: application/json

{
  "name": "Test User",
  "email": "test@example.com",
  "password": "encrypted_password_123",
  "role": "usuario"
}



### 12. TESTES ABRANGENTES DO MÓDULO

# Testar todos os módulos com diferentes papéis de usuário
# Superusuário deve ter acesso a tudo
# O administrador deve ter acesso a tudo, exceto ao gerenciamento de usuários
# O usuário comum deve ter acesso apenas ao perfil e permissões explicitamente concedidas

# Superusuário acessando todos os módulos
GET {{baseUrl}}/users
Authorization: Bearer {{superuserToken}}

###

GET {{baseUrl}}/financial
Authorization: Bearer {{superuserToken}}

###

GET {{baseUrl}}/reports
Authorization: Bearer {{superuserToken}}

###

GET {{baseUrl}}/products
Authorization: Bearer {{superuserToken}}

###

# Administrador acessando módulos (deve falhar nos usuários)
GET {{baseUrl}}/users
Authorization: Bearer {{adminToken}}

###

GET {{baseUrl}}/financial
Authorization: Bearer {{adminToken}}

###

GET {{baseUrl}}/reports
Authorization: Bearer {{adminToken}}

###

GET {{baseUrl}}/products
Authorization: Bearer {{adminToken}}

###

# Módulos de acesso de usuário comum (deve funcionar apenas no perfil)
GET {{baseUrl}}/users
Authorization: Bearer {{userToken}}

###

GET {{baseUrl}}/financial
Authorization: Bearer {{userToken}}

###

GET {{baseUrl}}/reports
Authorization: Bearer {{userToken}}

###

GET {{baseUrl}}/products
Authorization: Bearer {{userToken}}

###

GET {{baseUrl}}/profile
Authorization: Bearer {{userToken}}

###

# Criar novo módulo
POST {{baseUrl}}/modules
Authorization: Bearer {{superuserToken}}
Content-Type: application/json

{
  "name": "games",
  "description": "Games Module",
  "active": true
}

###

# Registrar acesso
POST {{baseUrl}}/accesses
Authorization: Bearer {{superuserToken}}
Content-Type: application/json

{
  "userId": 2,
  "module": "games",
  "route": "/games",
  "permitted": true,
  "ip": "127.0.0.1",
  "userAgent": "Mozilla/5.0"
}

###

# Conceder permissão de acesso a um módulo para um usuário
POST {{baseUrl}}/permissions/grant
Authorization: Bearer {{superuserToken}}
Content-Type: application/json

{
  "userId": 2,
  "module": "users"
}