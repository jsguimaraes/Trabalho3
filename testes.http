### NestJS Access Control System - HTTP Tests

# Base URL
@baseUrl = http://localhost:3000

# Token variables (replace with actual tokens after login)
@superuserToken = your_superuser_token_here
@adminToken = your_admin_token_here
@userToken = your_user_token_here

### 1. AUTHENTICATION TESTS

# Login as Superuser
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "admin@sistema.com",
  "senha": "admin123"
}

###

# Login as Administrator
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "gerente@example.com",
  "senha": "gerente123"
}

###

# Login as Common User
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "usuario@example.com",
  "senha": "usuario123"
}

###

### 2. USER MANAGEMENT TESTS (Superuser only)

# Get all users
GET {{baseUrl}}/users
Authorization: Bearer {{superuserToken}}

###

# Create new user
POST {{baseUrl}}/users
Authorization: Bearer {{superuserToken}}
Content-Type: application/json

{
  "nome": "New User",
  "email": "newuser@example.com",
  "senha": "newpass123",
  "papel": "usuario"
}

###

### 3. PROFILE MODULE TESTS

# Get user profile
GET {{baseUrl}}/profile
Authorization: Bearer {{userToken}}

###

# Update profile
PUT {{baseUrl}}/profile
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
  "nome": "Updated Name",
  "email": "updated@example.com"
}

###

# Get profile permissions
GET {{baseUrl}}/profile/permissions
Authorization: Bearer {{userToken}}

###

### 4. FINANCIAL MODULE TESTS

# Get financial data
GET {{baseUrl}}/financial
Authorization: Bearer {{adminToken}}

###

# Create transaction
POST {{baseUrl}}/financial/transaction
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "valor": 1500.00,
  "tipo": "receita",
  "descricao": "Venda de produtos"
}

###

# Get financial report
GET {{baseUrl}}/financial/report
Authorization: Bearer {{adminToken}}

###

### 5. REPORTS MODULE TESTS

# Get all reports
GET {{baseUrl}}/reports
Authorization: Bearer {{adminToken}}

###

# Generate new report
POST {{baseUrl}}/reports/generate
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "tipo": "vendas",
  "periodo": "janeiro-2024"
}

###

# Get sales report
GET {{baseUrl}}/reports/sales
Authorization: Bearer {{adminToken}}

###

### 6. PRODUCTS MODULE TESTS

# Get all products
GET {{baseUrl}}/products
Authorization: Bearer {{adminToken}}

###

# Create new product
POST {{baseUrl}}/products
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "nome": "New Product",
  "preco": 299.99,
  "estoque": 100,
  "categoria": "Electronics"
}

###

# Update product
PUT {{baseUrl}}/products/1
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "nome": "Updated Product",
  "preco": 399.99,
  "estoque": 75,
  "categoria": "Electronics"
}

###

# Delete product
DELETE {{baseUrl}}/products/1
Authorization: Bearer {{adminToken}}

###

# Get product categories
GET {{baseUrl}}/products/categories
Authorization: Bearer {{adminToken}}

###

### 7. PERMISSION TESTS

# Test access without permission (should fail)
GET {{baseUrl}}/users
Authorization: Bearer {{userToken}}

###

# Test access with permission (should succeed)
GET {{baseUrl}}/profile
Authorization: Bearer {{userToken}}

###

### 8. ACCESS LOGGING TESTS

# All requests above will automatically log access attempts
# Check database for access records

### 9. ERROR HANDLING TESTS

# Test invalid token
GET {{baseUrl}}/profile
Authorization: Bearer invalid_token

###

# Test expired token
GET {{baseUrl}}/profile
Authorization: Bearer expired_token

###

### 10. PASSWORD ENCRYPTION TEST

# Create user with encrypted password
POST {{baseUrl}}/users
Authorization: Bearer {{superuserToken}}
Content-Type: application/json

{
  "nome": "Test User",
  "email": "test@example.com",
  "senha": "encrypted_password_123",
  "papel": "usuario"
}

###

### 11. IMAGE UPLOAD TEST (if implemented)

# Upload avatar
POST {{baseUrl}}/profile/avatar
Authorization: Bearer {{userToken}}
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="avatar"; filename="avatar.jpg"
Content-Type: image/jpeg

< ./avatar.jpg
------WebKitFormBoundary7MA4YWxkTrZu0gW--

###

### 12. COMPREHENSIVE MODULE TEST

# Test all modules with different user roles
# Superuser should have access to everything
# Administrator should have access to everything except user management
# Common user should only have access to profile and explicitly granted permissions

# Superuser accessing all modules
GET {{baseUrl}}/users
Authorization: Bearer {{superuserToken}}

###

GET {{baseUrl}}/financial
Authorization: Bearer {{superuserToken}}

###

GET {{baseUrl}}/reports
Authorization: Bearer {{superuserToken}}

###

GET {{baseUrl}}/products
Authorization: Bearer {{superuserToken}}

###

# Administrator accessing modules (should fail on users)
GET {{baseUrl}}/users
Authorization: Bearer {{adminToken}}

###

GET {{baseUrl}}/financial
Authorization: Bearer {{adminToken}}

###

GET {{baseUrl}}/reports
Authorization: Bearer {{adminToken}}

###

GET {{baseUrl}}/products
Authorization: Bearer {{adminToken}}

###

# Common user accessing modules (should only work on profile)
GET {{baseUrl}}/users
Authorization: Bearer {{userToken}}

###

GET {{baseUrl}}/financial
Authorization: Bearer {{userToken}}

###

GET {{baseUrl}}/reports
Authorization: Bearer {{userToken}}

###

GET {{baseUrl}}/products
Authorization: Bearer {{userToken}}

###

GET {{baseUrl}}/profile
Authorization: Bearer {{userToken}}

###